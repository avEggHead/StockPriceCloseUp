# name: deploy-mvc-to-azure

# on:
#   push:
#     branches: [ main ]

# env:
#   APP_NAME: cja-mvc-demoproj       # must be globally unique
#   LOCATION: eastus2                # 👈 change if region blocked
#   SQL_ADMIN: sqladmin

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: '8.0.x'

#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       # Dynamically build RG name from APP_NAME + LOCATION
#       - name: Set RG name
#         run: echo "RG_NAME=rg-${APP_NAME}-${LOCATION}" >> $GITHUB_ENV

#       # ---- Provision Azure Resources (CLI only) ----
#       - name: Provision Azure Resources
#         run: |
#           set -e
#           az group create -n $RG_NAME -l $LOCATION --only-show-errors -o none

#           # App Service Plan (Free, Windows)
#           az appservice plan create \
#             -g $RG_NAME \
#             -n ${APP_NAME}-plan \
#             --sku F1

#           # Web App with Managed Identity
#           az webapp create \
#             -g $RG_NAME \
#             -p ${APP_NAME}-plan \
#             -n $APP_NAME \
#             --runtime "DOTNET:8" \
#             --assign-identity

#           # SQL Server + Database (serverless, auto-pause)
#           az sql server create \
#             -g $RG_NAME \
#             -n ${APP_NAME}-sql \
#             -u $SQL_ADMIN \
#             -p "${{ secrets.SQL_PASSWORD }}" \
#             -l $LOCATION

#           az sql db create \
#             -g $RG_NAME \
#             -s ${APP_NAME}-sql \
#             -n appdb \
#             -e GeneralPurpose \
#             -f Gen5 \
#             -c 1 \
#             --compute-model Serverless \
#             --auto-pause-delay 60

#           # Key Vault
#           az keyvault create \
#             -g $RG_NAME \
#             -n ${APP_NAME}-kv \
#             -l $LOCATION \

#       # ---- Add Finnhub secret ----
#       - name: Add Finnhub secret to Key Vault
#         run: |
#           az keyvault secret set \
#             --vault-name ${APP_NAME}-kv \
#             --name Finnhub-ApiKey \
#             --value "${{ secrets.FINNHUB_API_KEY }}"

#       # ---- Grant Web App MI access to secrets ----
#       - name: Grant Web App MI Key Vault Secrets User
#         run: |
#           principalId=$(az webapp identity show -g $RG_NAME -n $APP_NAME --query principalId -o tsv)
#           kvId=$(az keyvault show -g $RG_NAME -n ${APP_NAME}-kv --query id -o tsv)

#           # Give the Web App's MI secret read/list permissions
#           az keyvault set-policy \
#             -g $RG_NAME \
#             -n ${APP_NAME}-kv \
#             --object-id $principalId \
#             --secret-permissions get list

#           az webapp config appsettings set \
#             -g $RG_NAME -n $APP_NAME \
#             --settings KeyVaultName=${APP_NAME}-kv ASPNETCORE_ENVIRONMENT=Production

#           fqdn=$(az sql server show -g $RG_NAME -n ${APP_NAME}-sql --query fullyQualifiedDomainName -o tsv)
#           az webapp config connection-string set \
#             -g $RG_NAME -n $APP_NAME \
#             --settings DefaultConnection="Server=tcp:$fqdn,1433;Initial Catalog=appdb;Persist Security Info=False;User ID=$SQL_ADMIN;Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" \
#             --connection-string-type SQLAzure

#       # ---- EF Core migrations ----
#       - name: Get runner public IP
#         id: ip
#         run: echo "ip=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

#       - name: Open temporary SQL firewall for runner
#         run: |
#           az sql server firewall-rule create \
#             --resource-group $RG_NAME \
#             --server ${APP_NAME}-sql \
#             --name AllowGitHubRunner \
#             --start-ip-address ${{ steps.ip.outputs.ip }} \
#             --end-ip-address   ${{ steps.ip.outputs.ip }}

#       - name: Install dotnet-ef tool
#         run: |
#           dotnet tool install --global dotnet-ef
#           echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

#       - name: Run EF Core migrations (Database.Update)
#         working-directory: src/WebMvc
#         env:
#           ConnectionStrings__DefaultConnection: >-
#             Server=tcp:${APP_NAME}-sql.database.windows.net,1433;
#             Initial Catalog=appdb;
#             Persist Security Info=False;
#             User ID=${{ env.SQL_ADMIN }};
#             Password=${{ secrets.SQL_PASSWORD }};
#             MultipleActiveResultSets=False;
#             Encrypt=True;
#             TrustServerCertificate=False;
#             Connection Timeout=30;
#         run: dotnet ef database update --verbose

#       - name: Close temporary SQL firewall rule
#         if: always()
#         run: |
#           az sql server firewall-rule delete \
#             --resource-group $RG_NAME \
#             --server ${APP_NAME}-sql \
#             --name AllowGitHubRunner

#       # ---- Build & deploy app ----
#       - name: Restore
#         run: dotnet restore

#       - name: Build
#         run: dotnet build --configuration Release --no-restore

#       - name: Publish
#         run: dotnet publish --configuration Release -o ./publish

#       - name: Deploy Web App
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ env.APP_NAME }}
#           package: ./publish

#       # ---- Echo outputs ----
#       - name: Show deployment outputs
#         run: |
#           fqdn=$(az sql server show -g $RG_NAME -n ${APP_NAME}-sql --query fullyQualifiedDomainName -o tsv)
#           echo ""
#           echo "🌐 Web App URL:    https://${APP_NAME}.azurewebsites.net"
#           echo "🗄️  SQL Server:    ${APP_NAME}-sql"
#           echo "🔗 SQL FQDN:       $fqdn"
#           echo "📚 Database:       appdb"
#           echo "🔑 Key Vault:      ${APP_NAME}-kv"
#           echo ""
