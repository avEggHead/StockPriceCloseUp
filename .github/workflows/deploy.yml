name: deploy-mvc-to-azure

on:
  push:
    branches: [ main ]

env:
  APP_NAME: cja-mvc-demoproj    
  RG_NAME: rg-cja-mvc-demoprog
  LOCATION: eastus
  SQL_ADMIN: sqladmin  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade Azure CLI (workaround)
        run: az upgrade --yes || true

      # Create RG if it doesn't exist (idempotent)
      - name: Ensure Resource Group exists
        run: |
          az group create -n $RG_NAME -l $LOCATION

      # Deploy infra (idempotent)
      - name: Deploy Bicep (azure/cli)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail

            # Set subscription and quiet defaults (no formatted output)
            az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            az config set core.output=none core.only_show_errors=yes --local

            # Make sure bicep is ready
            az bicep install >/dev/null 2>&1 || true
            az bicep upgrade  >/dev/null 2>&1 || true

            # Ensure RG exists (suppress output)
            az group create \
              --name "${{ env.RG_NAME }}" \
              --location "${{ env.LOCATION }}" \
              --only-show-errors -o none

            # Deploy Bicep (suppress output)
            az deployment group create \
              --resource-group "${{ env.RG_NAME }}" \
              --name "deploy-${GITHUB_RUN_ID}" \
              --template-file infra/main.bicep \
              --parameters appName="${{ env.APP_NAME }}" \
                           location="${{ env.LOCATION }}" \
                           sqlAdmin="${{ env.SQL_ADMIN }}" \
                           sqlPassword='${{ secrets.SQL_PASSWORD }}' \
                           finnhubApiKey='${{ secrets.FINNHUB_API_KEY }}' \
              --only-show-errors -o none


      # EF Migration against the Azure SQL
      - name: Get runner public IP
        id: ip
        run: echo "ip=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

      - name: Open temporary SQL firewall for runner
        run: |
          az sql server firewall-rule create \
            --resource-group $RG_NAME \
            --server ${APP_NAME}-sql \
            --name AllowGitHubRunner \
            --start-ip-address ${{ steps.ip.outputs.ip }} \
            --end-ip-address   ${{ steps.ip.outputs.ip }}

      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Resolve SQL FQDN
        id: fqdn
        run: echo "fqdn=$(az sql server show -g $RG_NAME -n ${APP_NAME}-sql --query fullyQualifiedDomainName -o tsv)" >> $GITHUB_OUTPUT

      - name: Run EF Core migrations (Database.Update)
        working-directory: src/WebMvc
        env:
            ConnectionStrings__DefaultConnection: >-
              Server=tcp:${{ steps.fqdn.outputs.fqdn }},1433;
              Initial Catalog=appdb;
              Persist Security Info=False;
              User ID=${{ env.SQL_ADMIN }};
              Password=${{ secrets.SQL_PASSWORD }};
              MultipleActiveResultSets=False;
              Encrypt=True;
              TrustServerCertificate=False;
              Connection Timeout=30;
        run: dotnet ef database update --verbose

      - name: Close temporary SQL firewall rule
        if: always()
        run: |
          az sql server firewall-rule delete \
            --resource-group $RG_NAME \
            --server ${APP_NAME}-sql \
            --name AllowGitHubRunner


      # Build & publish app
      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release -o ./publish

      # Deploy to Web App
      - name: Deploy Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          package: ./publish
