name: deploy-mvc-to-azure

on:
  push:
    branches: [ main ]

env:
  APP_NAME: cja-mvc-demoproj       # must be globally unique
  RG_NAME: rg-cja-mvc-demoproj
  LOCATION: eastus
  SQL_ADMIN: sqladmin

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group exists
        run: az group create -n $RG_NAME -l $LOCATION --only-show-errors -o none

      # Deploy infrastructure using Bicep (unique deployment name avoids “response consumed” bug)
      - name: Deploy Bicep
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RG_NAME }}
          template: infra/main.bicep
          parameters: >
            appName=${{ env.APP_NAME }}
            location=${{ env.LOCATION }}
            sqlAdmin=${{ env.SQL_ADMIN }}
            sqlPassword=${{ secrets.SQL_PASSWORD }}
            finnhubApiKey=${{ secrets.FINNHUB_API_KEY }}
          deploymentName: deploy-${{ github.run_id }}
          failOnStdErr: false

      # ---- EF Core migrations against Azure SQL ----
      - name: Get runner public IP
        id: ip
        run: echo "ip=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

      - name: Open temporary SQL firewall for runner
        run: |
          az sql server firewall-rule create \
            --resource-group $RG_NAME \
            --server ${APP_NAME}-sql \
            --name AllowGitHubRunner \
            --start-ip-address ${{ steps.ip.outputs.ip }} \
            --end-ip-address   ${{ steps.ip.outputs.ip }}

      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Resolve SQL server FQDN dynamically (avoids hardcoded env URL)
      - name: Resolve SQL FQDN
        id: fqdn
        run: |
          fqdn=$(az sql server show \
            --resource-group $RG_NAME \
            --name ${APP_NAME}-sql \
            --query fullyQualifiedDomainName -o tsv)
          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT

      - name: Run EF Core migrations (Database.Update)
        working-directory: src/WebMvc
        env:
          ConnectionStrings__DefaultConnection: >-
            Server=tcp:${{ steps.fqdn.outputs.fqdn }},1433;
            Initial Catalog=appdb;
            Persist Security Info=False;
            User ID=${{ env.SQL_ADMIN }};
            Password=${{ secrets.SQL_PASSWORD }};
            MultipleActiveResultSets=False;
            Encrypt=True;
            TrustServerCertificate=False;
            Connection Timeout=30;
        run: dotnet ef database update --verbose

      - name: Close temporary SQL firewall rule
        if: always()
        run: |
          az sql server firewall-rule delete \
            --resource-group $RG_NAME \
            --server ${APP_NAME}-sql \
            --name AllowGitHubRunner

      # ---- Build & deploy app ----
      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release -o ./publish

      - name: Deploy Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          package: ./publish
